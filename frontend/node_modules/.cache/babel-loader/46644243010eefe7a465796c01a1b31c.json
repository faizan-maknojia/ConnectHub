{"ast":null,"code":"import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\nconst onlineEvents = ['online', 'offline'];\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        onlineEvents.forEach(event => {\n          window.addEventListener(event, listener, false);\n        });\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(event => {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    const changed = this.online !== online;\n\n    if (changed) {\n      this.online = online;\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(_ref => {\n      let {\n        listener\n      } = _ref;\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\n\nconst onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"mappings":";;AAOA,MAAMA,YAAY,GAAG,CAAC,QAAD,EAAW,SAAX,CAArB;;AAEO,MAAMC,aAAN,SAA4BC,YAA5B,CAAyC;AAM9CC,aAAW,GAAG;AACZ;;AACA,SAAKC,KAAL,GAAcC,QAAD,IAAc;AACzB;AACA;AACA,UAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;AACxC,cAAMC,QAAQ,GAAG,MAAMJ,QAAQ,EAA/B,CADwC;;;AAGxCL,oBAAY,CAACU,OAAbV,CAAsBW,KAAD,IAAW;AAC9BJ,gBAAM,CAACC,gBAAPD,CAAwBI,KAAxBJ,EAA+BE,QAA/BF,EAAyC,KAAzCA;AADF;AAIA,eAAO,MAAM;AACX;AACAP,sBAAY,CAACU,OAAbV,CAAsBW,KAAD,IAAW;AAC9BJ,kBAAM,CAACK,mBAAPL,CAA2BI,KAA3BJ,EAAkCE,QAAlCF;AADF;AAFF;AAMD;;AAED;AAlBF;AAoBD;;AAESM,aAAW,GAAS;AAC5B,QAAI,CAAC,KAAKC,OAAV,EAAmB;AACjB,WAAKC,gBAAL,CAAsB,KAAKX,KAA3B;AACD;AACF;;AAESY,eAAa,GAAG;AACxB,QAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AAAA;;AACxB,4BAAKH,OAAL;AACA,WAAKA,OAAL,GAAeI,SAAf;AACD;AACF;;AAEDH,kBAAgB,CAACX,KAAD,EAAuB;AAAA;;AACrC,SAAKA,KAAL,GAAaA,KAAb;AACA,2BAAKU,OAAL;AACA,SAAKA,OAAL,GAAeV,KAAK,CAAEe,MAAD,IAAsB;AACzC,UAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;AAC/B,aAAKC,SAAL,CAAeD,MAAf;AADF,aAEO;AACL,aAAKd,QAAL;AACD;AALiB,MAApB;AAOD;;AAEDe,WAAS,CAACD,MAAD,EAAyB;AAChC,UAAME,OAAO,GAAG,KAAKF,MAAL,KAAgBA,MAAhC;;AAEA,QAAIE,OAAJ,EAAa;AACX,WAAKF,MAAL,GAAcA,MAAd;AACA,WAAKd,QAAL;AACD;AACF;;AAEDA,UAAQ,GAAS;AACf,SAAKiB,SAAL,CAAeZ,OAAf,CAAuB,QAAkB;AAAA,UAAjB;AAAED;AAAF,OAAiB;AACvCA,cAAQ;AADV;AAGD;;AAEDc,UAAQ,GAAY;AAClB,QAAI,OAAO,KAAKJ,MAAZ,KAAuB,SAA3B,EAAsC;AACpC,aAAO,KAAKA,MAAZ;AACD;;AAED,QACE,OAAOK,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;AACA,aAAO,IAAP;AACD;;AAED,WAAOD,SAAS,CAACC,MAAjB;AACD;;AAnF6C;;AAsFnCC,mBAAa,GAAG,IAAIzB,aAAJ,EAAhByB","names":["onlineEvents","OnlineManager","Subscribable","constructor","setup","onOnline","isServer","window","addEventListener","listener","forEach","event","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","online","setOnline","changed","listeners","isOnline","navigator","onLine","onlineManager"],"sources":["D:\\Projects\\ConnectHub\\frontend\\node_modules\\@tanstack\\query-core\\src\\onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nconst onlineEvents = ['online', 'offline'] as const\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        onlineEvents.forEach((event) => {\n          window.addEventListener(event, listener, false)\n        })\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach((event) => {\n            window.removeEventListener(event, listener)\n          })\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    const changed = this.online !== online\n\n    if (changed) {\n      this.online = online\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module"}