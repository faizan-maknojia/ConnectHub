{"ast":null,"code":"import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs'; // CLASS\n\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n\n      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5; // Notify cache callback\n\n\n        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n\n        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };","map":{"version":3,"mappings":"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","names":["Mutation","Removable","constructor","config","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","setOptions","options","scheduleGc","updateCacheTime","cacheTime","meta","setState","dispatch","type","addObserver","observer","includes","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","_this$retryer$continu","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","promise","restored","onMutate","_this$mutationCache$c","_this$mutationCache$c2","context","data","onSuccess","_this$options$onSucce","onSettled","_this$options$onSettl","onError","process","env","NODE_ENV","_this$options$onError","undefined","_this$options$onSettl2","action","reducer","failureReason","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate"],"sources":["D:\\Projects\\youtube2022-social-app\\client\\node_modules\\@tanstack\\query-core\\src\\mutation.ts"],"sourcesContent":["import { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, createRetryer } from './retryer'\nimport type { MutationMeta, MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.defaultOptions = config.defaultOptions\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return this.retryer?.continue() ?? this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      // Notify cache callback\n      await this.mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.mutationCache.config.onSettled?.(\n          undefined,\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}